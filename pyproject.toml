[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "ppera"
version = "1.0.0"
description = "Personalization, Privacy, and Explainability of Recommendation Algorithms"
long_description = """
An in-depth analysis of three main families of recommendation algorithms 
(collaborative filtering, content-based, reinforcement learning) in terms of:
- Resilience to data-related stresses
- Resistance to anonymization  
- Ability to generate explanations
- Ethical risks associated with implementation

Addressing EU AI Act compliance and ethical risk taxonomy through extensive 
experiments across different recommendation scenarios and datasets.
"""
authors = [
  { name = "Julia Podsadna & Bartosz ChwiÅ‚kowski" },
]
license = { file = "LICENSE" }
readme = "README.md"
keywords = [
    "recommendation-systems",
    "reinforcement-learning", 
    "privacy",
    "explainability",
    "personalization",
    "ai-ethics"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.9"

# Core dependencies - keeping your exact list for compatibility
dependencies = [
    # === Data Science Stack ===
    "pandas",
    "scipy", 
    "scikit-learn",
    "matplotlib",
    
    # === Utilities ===
    "tqdm",
    "easydict",
    
    # === Recommendation Systems ===
    "recommenders",
    "cornac",
    "scikit-surprise",
    
    # === ML Experiment Tracking ===
    "mlflow",
    
    # === Data Processing ===
    "category-encoders",
    "pandera",
    
    # === Web Framework ===
    "fastapi",
    "gunicorn",
]

# Optional dependencies for development
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.0.0",
]

# Additional ML tools (not breaking existing setup)
ml-extra = [
    "torch>=1.12.0",
    "torchvision>=0.13.0",
    "numpy>=1.21.0",
    "seaborn>=0.11.0",
    "tensorboard>=2.10.0",
    "optuna>=3.0.0",
    "joblib>=1.3.0",
]

# All optional dependencies
all = ["ppera[dev,ml-extra]"]

# ================================
# Tool Configurations
# ================================

[tool.ruff]
line-length = 160
target-version = "py39"
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "ppera/rl_tmp",  # Exclude your RL temporary files
]

[tool.ruff.lint]
# Enhanced rule selection - keeping your core rules but adding useful ones
select = [
    "E",    # pycodestyle errors (your existing)
    "F",    # pyflakes (your existing) 
    "W",    # pycodestyle warnings (your existing)
    "I",    # isort (your existing)
    "UP",   # pyupgrade - modernize Python code
    "B",    # flake8-bugbear - find likely bugs
    "C4",   # flake8-comprehensions - better list/dict comprehensions
    "PIE",  # flake8-pie - misc lints
    "SIM",  # flake8-simplify - simplify code
    "TCH",  # flake8-type-checking - type checking imports
]

ignore = [
    "E731",   # lambda assignment (your existing)
    "C901",   # too complex (your existing) 
    "B008",   # do not perform function calls in argument defaults
    "B904",   # raise without from in except clause
    "SIM108", # use ternary operator (sometimes less readable)
    "UP007",  # use X | Y for type annotations (keep Union for compatibility)
]

# Per-file ignores for specific patterns in your codebase
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["B011", "S101"]  # Allow assert statements in tests
"ppera/rl_*.py" = ["C901"]  # Allow complex functions in RL modules (they're often necessarily complex)

[tool.ruff.lint.isort]
known-first-party = ["ppera"]
force-single-line = false
line-length = 160
split-on-trailing-comma = true
combine-as-imports = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true  # Keep typing imports for Python 3.9 compatibility

[tool.ruff.lint.flake8-type-checking]
strict = false  # Don't be too aggressive with TYPE_CHECKING imports

[tool.black]
line-length = 160  # Matching your ruff setting
target-version = ["py39"]
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 160
known_first_party = ["ppera"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--cov=ppera",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ppera"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "ppera/rl_tmp/*",  # Exclude your RL temporary files
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]